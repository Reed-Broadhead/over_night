generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  address  String
  email    String  @unique
  password String
  username String  @unique
  Orders   Order[]
}

model Order {
  id                 Int    @id @default(autoincrement())
  hotel              String
  comformationNumber Int    @unique
  date_of_res        String
  data_of_order      String
  price              Int
  userId             Int
  user               User   @relation(fields: [userId], references: [id])
}

model SixStars {
  id        Int    @id @default(autoincrement())
  HotelId   String
  hotelName String
  pictures  String
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model Citys {
  id      Int     @id(map: "citys_pkey") @default(autoincrement())
  name    String?
  picture String?
  code    String?
}

model Hotels {
  id                    Int          @id @default(autoincrement())
  S2C                   String?
  accommodationTypeCode String?
  addressId             Int?
  chainCode             String?
  cityId                Int?
  code                  Int
  coordinatesId         Int?
  countryCode           String
  descriptionId         Int?
  destinationCode       String
  nameId                Int?
  postalCode            String?
  ranking               Int?
  web                   String?
  zoneCode              Int?
  statesCode            String?
  lastUpdate            String?
  nameRef               Int?
  address               ApiContent?  @relation("AddressRelation", fields: [addressId], references: [id])
  city                  ApiContent?  @relation("CityRelation", fields: [cityId], references: [id])
  coordinates           Coordinates? @relation(fields: [coordinatesId], references: [id])
  description           ApiContent?  @relation("descriptionRelation", fields: [descriptionId], references: [id])
  name                  ApiContent?  @relation("nameRelation", fields: [nameRef], references: [id])
  images                Images[]
  phones                Phones[]
  rooms                 Rooms[]
}

model ApiContent {
  id           Int      @id @default(autoincrement())
  content      String
  languageCode String?
  Hotels       Hotels[] @relation("AddressRelation")
  Hotels1      Hotels[] @relation("CityRelation")
  Hotels2      Hotels[] @relation("descriptionRelation")
  Hotels3      Hotels[] @relation("nameRelation")
}

model Coordinates {
  id        Int      @id @default(autoincrement())
  latitude  Float
  longitude Float
  hotel     Hotels[]
}

model Phones {
  id          Int     @id @default(autoincrement())
  phoneNumber String
  phoneType   String?
  hotelId     Int
  hotel       Hotels  @relation(fields: [hotelId], references: [id])
}

model Images {
  id            Int     @id @default(autoincrement())
  order         Int?
  path          String?
  visualOrder   Int?
  hotelId       Int
  imageTypeCode String?
  hotel         Hotels  @relation(fields: [hotelId], references: [id])
}

model Rooms {
  id          Int         @id @default(autoincrement())
  roomCode    String
  description String?
  roomType    String?
  hotelsId    Int?
  roomStays   RoomStays[]
  Hotels      Hotels?     @relation(fields: [hotelsId], references: [id])
}

model RoomStays {
  id          Int     @id @default(autoincrement())
  description String?
  order       String?
  stayType    String?
  roomId      Int
  room        Rooms   @relation(fields: [roomId], references: [id])
}
