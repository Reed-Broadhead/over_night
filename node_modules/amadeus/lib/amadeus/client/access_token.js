"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _events = _interopRequireDefault(require("events"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// The number of seconds before the token expires, when
// we will already try to refresh it
var TOKEN_BUFFER = 10;

/**
  * A helper library to create and maintain the OAuth2 AccessTokens between
  * requests. Keeps track of the expiry time and automatically tries to fetch
  * a new token if needed.
  *
  * @property {string} accessToken the cached current access token (bearer)
  * @property {number} expiresAt the aproximate time this token expires at
  * @protected
  */
var AccessToken = /*#__PURE__*/function () {
  function AccessToken() {
    _classCallCheck(this, AccessToken);
    this.accessToken;
    this.expiresAt;
  }

  // PROTECTED

  /**
   * Fetches or returns a cached bearer token. Used by the Client to get a
   * token before making an API call.
   *
   * @param  {Client} client the Amadeus Client to make an API call with
   * @return {Promise.<Response,ResponseError>} a Bluebird Promise
   * @protected
   */
  _createClass(AccessToken, [{
    key: "bearerToken",
    value: function bearerToken(client) {
      var emitter = new _events["default"]();
      var promise = this.promise(emitter);
      this.emitOrLoadAccessToken(client, emitter);
      return promise;
    }

    // PRIVATE

    /**
     * Builds a Bluebird promise to be returned to the API user
     *
     * @param  {type} emitter the EventEmitter used to notify the Promise of
     * @return {Promise} a Bluebird promise
     * @private
     */
  }, {
    key: "promise",
    value: function promise(emitter) {
      return new Promise(function (resolve, reject) {
        emitter.on('resolve', function (response) {
          return resolve(response);
        });
        emitter.on('reject', function (error) {
          return reject(error);
        });
      });
    }

    /**
     * Checks if the token needs a refresh, if not emits the cached token,
     * otherwise tries to load a new access token
     *
     * @param  {Client} client the Amadeus Client to make an API call with
     * @param  {type} emitter the EventEmitter used to emit the token
     * @private
     */
  }, {
    key: "emitOrLoadAccessToken",
    value: function emitOrLoadAccessToken(client, emitter) {
      if (this.needsLoadOrRefresh()) {
        this.loadAccessToken(client, emitter);
      } else {
        emitter.emit('resolve', this.accessToken);
      }
    }

    /**
     * Checks if the token needs a refresh or first load
     *
     * @return {boolean} wether the token needs a refresh
     * @private
     */
  }, {
    key: "needsLoadOrRefresh",
    value: function needsLoadOrRefresh() {
      if (!this.accessToken) {
        return true;
      } else if (Date.now() + TOKEN_BUFFER > this.expiresAt) {
        return true;
      } else {
        return false;
      }
    }

    /**
     * Loads the access token using the client, emits the token when it's loaded
     *
     * @param  {Client} client the Amadeus Client to make an API call with
     * @param  {type} emitter the EventEmitter used to emit the token
     * @private
     */
  }, {
    key: "loadAccessToken",
    value: function loadAccessToken(client, emitter) {
      var _this = this;
      client.unauthenticatedRequest('POST', '/v1/security/oauth2/token', {
        'grant_type': 'client_credentials',
        'client_id': client.clientId,
        'client_secret': client.clientSecret
      }).then(function (response) {
        _this.storeAccessToken(response);
        _this.emitOrLoadAccessToken(client, emitter);
      })["catch"](function (error) {
        emitter.emit('reject', error);
      });
    }

    /**
     * Stores a loaded access token, calculating the expiry date
     *
     * @param  {Response} response the response object received from the client
     * @private
     */
  }, {
    key: "storeAccessToken",
    value: function storeAccessToken(response) {
      this.accessToken = response.result['access_token'];
      this.expiresAt = Date.now() + response.result['expires_in'] * 1000;
    }
  }]);
  return AccessToken;
}();
var _default = AccessToken;
exports["default"] = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,