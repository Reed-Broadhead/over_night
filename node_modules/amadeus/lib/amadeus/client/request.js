"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _qs = _interopRequireDefault(require("qs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/**
 * A Request object containing all the compiled information about this request.
 *
 * @property {string} host the host used for this API call
 * @property {number} port the port for this API call. Standard set to 443.
 * @property {boolean} ssl wether this API call uses SSL
 * @property {string} scheme the scheme inferred from the SSL state
 * @property {string} verb the HTTP method, for example `GET` or `POST`
 * @property {string} path the full path of the API endpoint
 * @property {Object} params the parameters to pass in the query or body
 * @property {string} queryPath the path and query string used for the API call
 * @property {string} bearerToken the authentication token
 * @property {string} clientVersion the version of the Amadeus library
 * @property {string} languageVersion the version of Node used
 * @property {string} appId the custom ID of the application using this library
 * @property {string} appVersion the custom version of the application
 *  using this library
 * @property {Object} headers the request headers
 *
 * @param {Object} options
 */
var Request = /*#__PURE__*/function () {
  function Request(options) {
    _classCallCheck(this, Request);
    this.host = options.host;
    this.port = options.port;
    this.ssl = options.ssl;
    this.scheme = this.ssl ? 'https' : 'http';
    this.verb = options.verb;
    this.path = options.path;
    this.params = options.params;
    this.queryPath = this.fullQueryPath();
    this.bearerToken = options.bearerToken;
    this.clientVersion = options.clientVersion;
    this.languageVersion = options.languageVersion.replace('v', '');
    this.appId = options.appId;
    this.appVersion = options.appVersion;
    this.headers = {
      'User-Agent': this.userAgent(),
      'Accept': 'application/json, application/vnd.amadeus+json'
    };
    this.ListHTTPOverride = ['/v2/shopping/flight-offers', '/v1/shopping/seatmaps', '/v1/shopping/availability/flight-availabilities', '/v2/shopping/flight-offers/prediction', '/v1/shopping/flight-offers/pricing', '/v1/shopping/flight-offers/upselling'];
    this.addAuthorizationHeader();
    this.addContentTypeHeader();
    this.addHTTPOverrideHeader();
  }

  // PROTECTED

  /**
   * Compiles the options for the HTTP request.
   *
   * Used by Client.execute when executing this request against the server.
   *
   * @return {Object} an associative array of options to be passed into the
   *  Client.execute function
   * @protected
   */
  _createClass(Request, [{
    key: "options",
    value: function options() {
      var options = {
        'host': this.host,
        'port': this.port,
        'protocol': "".concat(this.scheme, ":"),
        'path': this.queryPath,
        'method': this.verb,
        'headers': this.headers
      };
      return options;
    }

    /**
     * Creats the body for the API cal, serializing the params if the verb is POST.
     *
     * @return {string} the serialized params
     * @protected
     */
  }, {
    key: "body",
    value: function body() {
      if (this.verb !== 'POST') {
        return '';
      } else {
        if (!this.bearerToken) {
          return _qs["default"].stringify(this.params);
        }
        return this.params;
      }
    }

    // PRIVATE

    /**
     * Build up the custom User Agent
     *
     * @return {string} a user agent in the format "library/version language/version app/version"
     * @private
     */
  }, {
    key: "userAgent",
    value: function userAgent() {
      var userAgent = "amadeus-node/".concat(this.clientVersion, " node/").concat(this.languageVersion);
      if (!this.appId) {
        return userAgent;
      }
      return "".concat(userAgent, " ").concat(this.appId, "/").concat(this.appVersion);
    }

    /**
     * Build the full query path, combining the path with the query params if the
     * verb is 'GET'. For example: '/foo/bar?baz=qux'
     *
     * @return {string} the path and params combined into one string.
     * @private
     */
  }, {
    key: "fullQueryPath",
    value: function fullQueryPath() {
      if (this.verb === 'POST') {
        return this.path;
      } else {
        return "".concat(this.path, "?").concat(_qs["default"].stringify(this.params));
      }
    }

    /**
     * Adds an Authorization header if the BearerToken is present
     *
     * @private
     */
  }, {
    key: "addAuthorizationHeader",
    value: function addAuthorizationHeader() {
      if (!this.bearerToken) {
        return;
      }
      this.headers['Authorization'] = "Bearer ".concat(this.bearerToken);
    }

    /**
     * Adds an Content-Type header if the HTTP method equals POST
     *
     * @private
     */
  }, {
    key: "addContentTypeHeader",
    value: function addContentTypeHeader() {
      if (this.verb === 'POST' && !this.bearerToken) {
        this.headers['Content-Type'] = 'application/x-www-form-urlencoded';
      } else {
        this.headers['Content-Type'] = 'application/vnd.amadeus+json';
      }
      return;
    }

    /**
    * Adds HTTPOverride method if it is required
    *
    *  @private
    */
  }, {
    key: "addHTTPOverrideHeader",
    value: function addHTTPOverrideHeader() {
      if (this.verb === 'POST' && this.ListHTTPOverride.includes(this.path)) {
        this.headers['X-HTTP-Method-Override'] = 'GET';
      }
      return;
    }
  }]);
  return Request;
}();
var _default = Request;
exports["default"] = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcXMiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImkiLCJsZW5ndGgiLCJkZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJfdG9Qcm9wZXJ0eUtleSIsImtleSIsIl9jcmVhdGVDbGFzcyIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImFyZyIsIl90b1ByaW1pdGl2ZSIsIlN0cmluZyIsImlucHV0IiwiaGludCIsInByaW0iLCJ0b1ByaW1pdGl2ZSIsInVuZGVmaW5lZCIsInJlcyIsImNhbGwiLCJOdW1iZXIiLCJSZXF1ZXN0Iiwib3B0aW9ucyIsImhvc3QiLCJwb3J0Iiwic3NsIiwic2NoZW1lIiwidmVyYiIsInBhdGgiLCJwYXJhbXMiLCJxdWVyeVBhdGgiLCJmdWxsUXVlcnlQYXRoIiwiYmVhcmVyVG9rZW4iLCJjbGllbnRWZXJzaW9uIiwibGFuZ3VhZ2VWZXJzaW9uIiwicmVwbGFjZSIsImFwcElkIiwiYXBwVmVyc2lvbiIsImhlYWRlcnMiLCJ1c2VyQWdlbnQiLCJMaXN0SFRUUE92ZXJyaWRlIiwiYWRkQXV0aG9yaXphdGlvbkhlYWRlciIsImFkZENvbnRlbnRUeXBlSGVhZGVyIiwiYWRkSFRUUE92ZXJyaWRlSGVhZGVyIiwidmFsdWUiLCJjb25jYXQiLCJib2R5IiwicXMiLCJzdHJpbmdpZnkiLCJpbmNsdWRlcyIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmF1bHQiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvYW1hZGV1cy9jbGllbnQvcmVxdWVzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcXMgZnJvbSAncXMnO1xuXG4vKipcbiAqIEEgUmVxdWVzdCBvYmplY3QgY29udGFpbmluZyBhbGwgdGhlIGNvbXBpbGVkIGluZm9ybWF0aW9uIGFib3V0IHRoaXMgcmVxdWVzdC5cbiAqXG4gKiBAcHJvcGVydHkge3N0cmluZ30gaG9zdCB0aGUgaG9zdCB1c2VkIGZvciB0aGlzIEFQSSBjYWxsXG4gKiBAcHJvcGVydHkge251bWJlcn0gcG9ydCB0aGUgcG9ydCBmb3IgdGhpcyBBUEkgY2FsbC4gU3RhbmRhcmQgc2V0IHRvIDQ0My5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gc3NsIHdldGhlciB0aGlzIEFQSSBjYWxsIHVzZXMgU1NMXG4gKiBAcHJvcGVydHkge3N0cmluZ30gc2NoZW1lIHRoZSBzY2hlbWUgaW5mZXJyZWQgZnJvbSB0aGUgU1NMIHN0YXRlXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdmVyYiB0aGUgSFRUUCBtZXRob2QsIGZvciBleGFtcGxlIGBHRVRgIG9yIGBQT1NUYFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHBhdGggdGhlIGZ1bGwgcGF0aCBvZiB0aGUgQVBJIGVuZHBvaW50XG4gKiBAcHJvcGVydHkge09iamVjdH0gcGFyYW1zIHRoZSBwYXJhbWV0ZXJzIHRvIHBhc3MgaW4gdGhlIHF1ZXJ5IG9yIGJvZHlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBxdWVyeVBhdGggdGhlIHBhdGggYW5kIHF1ZXJ5IHN0cmluZyB1c2VkIGZvciB0aGUgQVBJIGNhbGxcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBiZWFyZXJUb2tlbiB0aGUgYXV0aGVudGljYXRpb24gdG9rZW5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjbGllbnRWZXJzaW9uIHRoZSB2ZXJzaW9uIG9mIHRoZSBBbWFkZXVzIGxpYnJhcnlcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBsYW5ndWFnZVZlcnNpb24gdGhlIHZlcnNpb24gb2YgTm9kZSB1c2VkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gYXBwSWQgdGhlIGN1c3RvbSBJRCBvZiB0aGUgYXBwbGljYXRpb24gdXNpbmcgdGhpcyBsaWJyYXJ5XG4gKiBAcHJvcGVydHkge3N0cmluZ30gYXBwVmVyc2lvbiB0aGUgY3VzdG9tIHZlcnNpb24gb2YgdGhlIGFwcGxpY2F0aW9uXG4gKiAgdXNpbmcgdGhpcyBsaWJyYXJ5XG4gKiBAcHJvcGVydHkge09iamVjdH0gaGVhZGVycyB0aGUgcmVxdWVzdCBoZWFkZXJzXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuY2xhc3MgUmVxdWVzdCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICB0aGlzLmhvc3QgICAgICAgICAgICA9IG9wdGlvbnMuaG9zdDtcbiAgICB0aGlzLnBvcnQgICAgICAgICAgICA9IG9wdGlvbnMucG9ydDtcbiAgICB0aGlzLnNzbCAgICAgICAgICAgICA9IG9wdGlvbnMuc3NsO1xuICAgIHRoaXMuc2NoZW1lICAgICAgICAgID0gdGhpcy5zc2wgPyAnaHR0cHMnIDogJ2h0dHAnO1xuICAgIHRoaXMudmVyYiAgICAgICAgICAgID0gb3B0aW9ucy52ZXJiO1xuICAgIHRoaXMucGF0aCAgICAgICAgICAgID0gb3B0aW9ucy5wYXRoO1xuICAgIHRoaXMucGFyYW1zICAgICAgICAgID0gb3B0aW9ucy5wYXJhbXM7XG4gICAgdGhpcy5xdWVyeVBhdGggICAgICAgPSB0aGlzLmZ1bGxRdWVyeVBhdGgoKTtcbiAgICB0aGlzLmJlYXJlclRva2VuICAgICA9IG9wdGlvbnMuYmVhcmVyVG9rZW47XG4gICAgdGhpcy5jbGllbnRWZXJzaW9uICAgPSBvcHRpb25zLmNsaWVudFZlcnNpb247XG4gICAgdGhpcy5sYW5ndWFnZVZlcnNpb24gPSBvcHRpb25zLmxhbmd1YWdlVmVyc2lvbi5yZXBsYWNlKCd2JywgJycpO1xuICAgIHRoaXMuYXBwSWQgICAgICAgICAgID0gb3B0aW9ucy5hcHBJZDtcbiAgICB0aGlzLmFwcFZlcnNpb24gICAgICA9IG9wdGlvbnMuYXBwVmVyc2lvbjtcbiAgICB0aGlzLmhlYWRlcnMgICAgICAgICA9IHtcbiAgICAgICdVc2VyLUFnZW50JyA6IHRoaXMudXNlckFnZW50KCksXG4gICAgICAnQWNjZXB0JyA6ICdhcHBsaWNhdGlvbi9qc29uLCBhcHBsaWNhdGlvbi92bmQuYW1hZGV1cytqc29uJ1xuICAgIH07XG4gICAgdGhpcy5MaXN0SFRUUE92ZXJyaWRlPSBbXG4gICAgICAnL3YyL3Nob3BwaW5nL2ZsaWdodC1vZmZlcnMnLFxuICAgICAgJy92MS9zaG9wcGluZy9zZWF0bWFwcycsXG4gICAgICAnL3YxL3Nob3BwaW5nL2F2YWlsYWJpbGl0eS9mbGlnaHQtYXZhaWxhYmlsaXRpZXMnLFxuICAgICAgJy92Mi9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzL3ByZWRpY3Rpb24nLFxuICAgICAgJy92MS9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzL3ByaWNpbmcnLFxuICAgICAgJy92MS9zaG9wcGluZy9mbGlnaHQtb2ZmZXJzL3Vwc2VsbGluZydcbiAgICBdO1xuICAgIHRoaXMuYWRkQXV0aG9yaXphdGlvbkhlYWRlcigpO1xuICAgIHRoaXMuYWRkQ29udGVudFR5cGVIZWFkZXIoKTtcbiAgICB0aGlzLmFkZEhUVFBPdmVycmlkZUhlYWRlcigpO1xuICB9XG5cbiAgLy8gUFJPVEVDVEVEXG5cbiAgLyoqXG4gICAqIENvbXBpbGVzIHRoZSBvcHRpb25zIGZvciB0aGUgSFRUUCByZXF1ZXN0LlxuICAgKlxuICAgKiBVc2VkIGJ5IENsaWVudC5leGVjdXRlIHdoZW4gZXhlY3V0aW5nIHRoaXMgcmVxdWVzdCBhZ2FpbnN0IHRoZSBzZXJ2ZXIuXG4gICAqXG4gICAqIEByZXR1cm4ge09iamVjdH0gYW4gYXNzb2NpYXRpdmUgYXJyYXkgb2Ygb3B0aW9ucyB0byBiZSBwYXNzZWQgaW50byB0aGVcbiAgICogIENsaWVudC5leGVjdXRlIGZ1bmN0aW9uXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIG9wdGlvbnMoKSB7XG4gICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAnaG9zdCcgOiB0aGlzLmhvc3QsXG4gICAgICAncG9ydCcgOiB0aGlzLnBvcnQsXG4gICAgICAncHJvdG9jb2wnIDogYCR7dGhpcy5zY2hlbWV9OmAsXG4gICAgICAncGF0aCcgOiB0aGlzLnF1ZXJ5UGF0aCxcbiAgICAgICdtZXRob2QnIDogdGhpcy52ZXJiLFxuICAgICAgJ2hlYWRlcnMnIDogdGhpcy5oZWFkZXJzXG4gICAgfTtcbiAgICByZXR1cm4gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdHMgdGhlIGJvZHkgZm9yIHRoZSBBUEkgY2FsLCBzZXJpYWxpemluZyB0aGUgcGFyYW1zIGlmIHRoZSB2ZXJiIGlzIFBPU1QuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gdGhlIHNlcmlhbGl6ZWQgcGFyYW1zXG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGJvZHkoKSB7XG4gICAgaWYgKHRoaXMudmVyYiAhPT0gJ1BPU1QnKSB7IHJldHVybiAnJzsgfVxuICAgIGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmJlYXJlclRva2VuKSB7XG4gICAgICAgIHJldHVybiBxcy5zdHJpbmdpZnkodGhpcy5wYXJhbXMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMucGFyYW1zO1xuICAgIH1cbiAgfVxuXG4gIC8vIFBSSVZBVEVcblxuICAvKipcbiAgICogQnVpbGQgdXAgdGhlIGN1c3RvbSBVc2VyIEFnZW50XG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ30gYSB1c2VyIGFnZW50IGluIHRoZSBmb3JtYXQgXCJsaWJyYXJ5L3ZlcnNpb24gbGFuZ3VhZ2UvdmVyc2lvbiBhcHAvdmVyc2lvblwiXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICB1c2VyQWdlbnQoKSB7XG4gICAgbGV0IHVzZXJBZ2VudCA9IGBhbWFkZXVzLW5vZGUvJHt0aGlzLmNsaWVudFZlcnNpb259IG5vZGUvJHt0aGlzLmxhbmd1YWdlVmVyc2lvbn1gO1xuICAgIGlmICghdGhpcy5hcHBJZCkgeyByZXR1cm4gdXNlckFnZW50OyB9XG4gICAgcmV0dXJuIGAke3VzZXJBZ2VudH0gJHt0aGlzLmFwcElkfS8ke3RoaXMuYXBwVmVyc2lvbn1gO1xuICB9XG5cbiAgLyoqXG4gICAqIEJ1aWxkIHRoZSBmdWxsIHF1ZXJ5IHBhdGgsIGNvbWJpbmluZyB0aGUgcGF0aCB3aXRoIHRoZSBxdWVyeSBwYXJhbXMgaWYgdGhlXG4gICAqIHZlcmIgaXMgJ0dFVCcuIEZvciBleGFtcGxlOiAnL2Zvby9iYXI/YmF6PXF1eCdcbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfSB0aGUgcGF0aCBhbmQgcGFyYW1zIGNvbWJpbmVkIGludG8gb25lIHN0cmluZy5cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGZ1bGxRdWVyeVBhdGgoKSB7XG4gICAgaWYgKHRoaXMudmVyYiA9PT0gJ1BPU1QnKSB7IHJldHVybiB0aGlzLnBhdGg7IH1cbiAgICBlbHNlIHsgcmV0dXJuIGAke3RoaXMucGF0aH0/JHtxcy5zdHJpbmdpZnkodGhpcy5wYXJhbXMpfWA7IH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFuIEF1dGhvcml6YXRpb24gaGVhZGVyIGlmIHRoZSBCZWFyZXJUb2tlbiBpcyBwcmVzZW50XG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBhZGRBdXRob3JpemF0aW9uSGVhZGVyKCkge1xuICAgIGlmICghdGhpcy5iZWFyZXJUb2tlbikgeyByZXR1cm47IH1cbiAgICB0aGlzLmhlYWRlcnNbJ0F1dGhvcml6YXRpb24nXSA9IGBCZWFyZXIgJHt0aGlzLmJlYXJlclRva2VufWA7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBDb250ZW50LVR5cGUgaGVhZGVyIGlmIHRoZSBIVFRQIG1ldGhvZCBlcXVhbHMgUE9TVFxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgYWRkQ29udGVudFR5cGVIZWFkZXIoKSB7XG4gICAgaWYgKHRoaXMudmVyYiA9PT0gJ1BPU1QnICYmICF0aGlzLmJlYXJlclRva2VuKSB7XG4gICAgICB0aGlzLmhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSAnYXBwbGljYXRpb24vdm5kLmFtYWRldXMranNvbic7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAqIEFkZHMgSFRUUE92ZXJyaWRlIG1ldGhvZCBpZiBpdCBpcyByZXF1aXJlZFxuICAqXG4gICogIEBwcml2YXRlXG4gICovXG4gIGFkZEhUVFBPdmVycmlkZUhlYWRlcigpIHtcbiAgICBpZiAodGhpcy52ZXJiID09PSAnUE9TVCcgJiYgdGhpcy5MaXN0SFRUUE92ZXJyaWRlLmluY2x1ZGVzKHRoaXMucGF0aCkpIHtcbiAgICAgIHRoaXMuaGVhZGVyc1snWC1IVFRQLU1ldGhvZC1PdmVycmlkZSddID0gJ0dFVCc7XG4gICAgfVxuICAgIHJldHVybjtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSZXF1ZXN0O1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxHQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBb0IsU0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQUFBLFNBQUFFLFFBQUFDLENBQUEsc0NBQUFELE9BQUEsd0JBQUFFLE1BQUEsdUJBQUFBLE1BQUEsQ0FBQUMsUUFBQSxhQUFBRixDQUFBLGtCQUFBQSxDQUFBLGdCQUFBQSxDQUFBLFdBQUFBLENBQUEseUJBQUFDLE1BQUEsSUFBQUQsQ0FBQSxDQUFBRyxXQUFBLEtBQUFGLE1BQUEsSUFBQUQsQ0FBQSxLQUFBQyxNQUFBLENBQUFHLFNBQUEscUJBQUFKLENBQUEsS0FBQUQsT0FBQSxDQUFBQyxDQUFBO0FBQUEsU0FBQUssZ0JBQUFDLFFB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